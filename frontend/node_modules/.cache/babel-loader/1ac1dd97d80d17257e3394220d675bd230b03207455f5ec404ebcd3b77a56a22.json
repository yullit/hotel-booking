{"ast":null,"code":"var _jsxFileName = \"E:\\\\hotel-booking\\\\frontend\\\\src\\\\modules\\\\AuthPage\\\\AuthPage.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useContext } from \"react\";\nimport { AuthContext } from \"../../context/AuthContext\"; // Імпортуємо AuthContext\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthPage = () => {\n  _s();\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [confirmPassword, setConfirmPassword] = useState(\"\"); // Поле для підтвердження пароля\n  const [username, setUsername] = useState(\"\"); // Для реєстрації\n  const [firstName, setFirstName] = useState(\"\"); // Ім'я\n  const [lastName, setLastName] = useState(\"\"); // Прізвище\n  const [isLogin, setIsLogin] = useState(true);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const navigate = useNavigate();\n  const authContext = useContext(AuthContext);\n  if (!authContext) {\n    throw new Error(\"AuthContext is not available\");\n  }\n  const {\n    login\n  } = authContext;\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!email || !password || !isLogin && !username || !isLogin && !firstName || !isLogin && !lastName) {\n      setError(\"Будь ласка, заповніть всі поля.\");\n      return;\n    }\n    if (!isLogin && password !== confirmPassword) {\n      // Перевірка на співпадіння паролів\n      setError(\"Паролі не збігаються.\");\n      return;\n    }\n    setLoading(true);\n    setError(null);\n    const endpoint = isLogin ? \"login\" : \"register\";\n    const body = {\n      email,\n      password,\n      firstName,\n      lastName,\n      ...(isLogin ? {} : {\n        username\n      })\n    }; // Додаємо поля firstName і lastName при реєстрації\n\n    try {\n      const response = await fetch(`http://localhost:5000/${endpoint}`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(body)\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        setError(errorData.message || \"Невірний логін або пароль\");\n        return;\n      }\n      const data = await response.json();\n      login(data.token);\n      if (data.token) {\n        const decodedToken = JSON.parse(atob(data.token.split(\".\")[1]));\n        if (decodedToken.role === \"manager\") {\n          navigate(\"/manage-rooms\");\n        } else {\n          navigate(\"/rooms\");\n        }\n      } else {\n        setError(\"Токен не отримано\");\n      }\n    } catch (err) {\n      console.error(err);\n      setError(\"Помилка при підключенні до сервера\");\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"auth-form\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthPage, \"NrzYCeh2kG1aVIxzfCBRc1dS7iw=\", false, function () {\n  return [useNavigate];\n});\n_c = AuthPage;\nexport default AuthPage;\nvar _c;\n$RefreshReg$(_c, \"AuthPage\");","map":{"version":3,"names":["React","useState","useNavigate","useContext","AuthContext","jsxDEV","_jsxDEV","AuthPage","_s","email","setEmail","password","setPassword","confirmPassword","setConfirmPassword","username","setUsername","firstName","setFirstName","lastName","setLastName","isLogin","setIsLogin","error","setError","loading","setLoading","navigate","authContext","Error","login","handleSubmit","e","preventDefault","endpoint","body","response","fetch","method","headers","JSON","stringify","ok","errorData","json","message","data","token","decodedToken","parse","atob","split","role","err","console","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["E:/hotel-booking/frontend/src/modules/AuthPage/AuthPage.tsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useContext } from \"react\";\nimport { AuthContext } from \"../../context/AuthContext\"; // Імпортуємо AuthContext\n\nconst AuthPage = () => {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [confirmPassword, setConfirmPassword] = useState(\"\"); // Поле для підтвердження пароля\n  const [username, setUsername] = useState(\"\"); // Для реєстрації\n  const [firstName, setFirstName] = useState(\"\"); // Ім'я\n  const [lastName, setLastName] = useState(\"\"); // Прізвище\n  const [isLogin, setIsLogin] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [loading, setLoading] = useState(false);\n  const navigate = useNavigate();\n  const authContext = useContext(AuthContext);\n\n  if (!authContext) {\n    throw new Error(\"AuthContext is not available\");\n  }\n\n  const { login } = authContext;\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (!email || !password || (!isLogin && !username) || (!isLogin && !firstName) || (!isLogin && !lastName)) {\n      setError(\"Будь ласка, заповніть всі поля.\");\n      return;\n    }\n\n    if (!isLogin && password !== confirmPassword) {  // Перевірка на співпадіння паролів\n      setError(\"Паролі не збігаються.\");\n      return;\n    }\n\n    setLoading(true);\n    setError(null);\n\n    const endpoint = isLogin ? \"login\" : \"register\";\n    const body = { email, password, firstName, lastName, ...(isLogin ? {} : { username }) }; // Додаємо поля firstName і lastName при реєстрації\n\n    try {\n      const response = await fetch(`http://localhost:5000/${endpoint}`, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(body),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        setError(errorData.message || \"Невірний логін або пароль\");\n        return;\n      }\n\n      const data = await response.json();\n      login(data.token);\n\n      if (data.token) {\n        const decodedToken = JSON.parse(atob(data.token.split(\".\")[1]));\n        \n        if (decodedToken.role === \"manager\") {\n          navigate(\"/manage-rooms\");\n        } else {\n          navigate(\"/rooms\");\n        }\n      } else {\n        setError(\"Токен не отримано\");\n      }\n    } catch (err) {\n      console.error(err);\n      setError(\"Помилка при підключенні до сервера\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"auth-form\">\n\n    </div>\n  );\n};\n\nexport default AuthPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}