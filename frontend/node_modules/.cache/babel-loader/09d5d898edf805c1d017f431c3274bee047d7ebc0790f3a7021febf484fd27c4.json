{"ast":null,"code":"/*import { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\"; // Для перенаправлення після логіну\n\nconst LoginPage = () => {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [error, setError] = useState<string | null>(null); // Для відображення помилок\n  const [loading, setLoading] = useState(false); // Для індикації завантаження\n  const navigate = useNavigate(); // Для перенаправлення\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    // Перевірка на порожні поля\n    if (!email || !password) {\n      setError(\"Будь ласка, заповніть всі поля.\");\n      return;\n    }\n\n    setLoading(true); // Початок завантаження\n    setError(null); // Очищення попередніх помилок\n\n    try {\n      const response = await fetch(\"http://localhost:5000/login\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ email, password }),\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        localStorage.setItem(\"token\", data.token); // Зберігаємо токен\n        console.log(\"JWT токен:\", data.token);\n\n        // Перенаправлення після успішного логіну\n        navigate(\"/rooms\");\n      } else {\n        const errorData = await response.json();\n        setError(errorData.message || \"Невірний логін або пароль\");\n      }\n    } catch (err) {\n      console.error(err);\n      setError(\"Помилка при підключенні до сервера\");\n    } finally {\n      setLoading(false); // Завершення завантаження\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"email\"\n        placeholder=\"Email\"\n        value={email}\n        onChange={(e) => setEmail(e.target.value)}\n      />\n      <input\n        type=\"password\"\n        placeholder=\"Password\"\n        value={password}\n        onChange={(e) => setPassword(e.target.value)}\n      />\n      <button type=\"submit\" disabled={loading}>\n        {loading ? \"Зачекайте...\" : \"Увійти\"}\n      </button>\n      {error && <p style={{ color: \"red\" }}>{error}</p>}\n    </form>\n  );\n};\n\nexport default LoginPage;\n*/","map":{"version":3,"names":[],"sources":["E:/hotel-booking/frontend/src/modules/LoginPage/LoginPage.tsx"],"sourcesContent":["/*import { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\"; // Для перенаправлення після логіну\n\nconst LoginPage = () => {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [error, setError] = useState<string | null>(null); // Для відображення помилок\n  const [loading, setLoading] = useState(false); // Для індикації завантаження\n  const navigate = useNavigate(); // Для перенаправлення\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    // Перевірка на порожні поля\n    if (!email || !password) {\n      setError(\"Будь ласка, заповніть всі поля.\");\n      return;\n    }\n\n    setLoading(true); // Початок завантаження\n    setError(null); // Очищення попередніх помилок\n\n    try {\n      const response = await fetch(\"http://localhost:5000/login\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ email, password }),\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        localStorage.setItem(\"token\", data.token); // Зберігаємо токен\n        console.log(\"JWT токен:\", data.token);\n\n        // Перенаправлення після успішного логіну\n        navigate(\"/rooms\");\n      } else {\n        const errorData = await response.json();\n        setError(errorData.message || \"Невірний логін або пароль\");\n      }\n    } catch (err) {\n      console.error(err);\n      setError(\"Помилка при підключенні до сервера\");\n    } finally {\n      setLoading(false); // Завершення завантаження\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"email\"\n        placeholder=\"Email\"\n        value={email}\n        onChange={(e) => setEmail(e.target.value)}\n      />\n      <input\n        type=\"password\"\n        placeholder=\"Password\"\n        value={password}\n        onChange={(e) => setPassword(e.target.value)}\n      />\n      <button type=\"submit\" disabled={loading}>\n        {loading ? \"Зачекайте...\" : \"Увійти\"}\n      </button>\n      {error && <p style={{ color: \"red\" }}>{error}</p>}\n    </form>\n  );\n};\n\nexport default LoginPage;\n*/"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}