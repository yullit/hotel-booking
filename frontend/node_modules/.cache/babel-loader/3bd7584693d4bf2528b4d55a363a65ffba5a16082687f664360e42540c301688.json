{"ast":null,"code":"var _jsxFileName = \"E:\\\\hotel-booking\\\\frontend\\\\src\\\\modules\\\\AuthPage\\\\AuthPage.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useContext } from \"react\";\nimport { AuthContext } from \"../../context/AuthContext\";\nimport './AuthPage.scss';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst AuthPage = () => {\n  _s();\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n  const [firstName, setFirstName] = useState(\"\");\n  const [lastName, setLastName] = useState(\"\");\n  const [isLogin, setIsLogin] = useState(true);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [showSuccess, setShowSuccess] = useState(false);\n  const [emailError, setEmailError] = useState(null);\n  const [passwordError, setPasswordError] = useState(null);\n  const [confirmPasswordError, setConfirmPasswordError] = useState(null);\n  const [firstNameError, setFirstNameError] = useState(null);\n  const [lastNameError, setLastNameError] = useState(null);\n  const navigate = useNavigate();\n  const authContext = useContext(AuthContext);\n  if (!authContext) {\n    throw new Error(\"AuthContext is not available\");\n  }\n  const {\n    login\n  } = authContext;\n  const validateEmail = email => {\n    const regex = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,6}$/;\n    return regex.test(email);\n  };\n  const validatePassword = password => {\n    return password.length >= 6;\n  };\n  const validateConfirmPassword = (password, confirmPassword) => {\n    return password === confirmPassword;\n  };\n  const validateNameLength = name => {\n    return name.trim().length >= 2;\n  };\n  const validateForm = () => {\n    let valid = true;\n    if (!validateEmail(email)) {\n      setEmailError(\"Електронна пошта повинна мати формат: user@example.com\");\n      valid = false;\n    } else {\n      setEmailError(null);\n    }\n    if (!validatePassword(password)) {\n      setPasswordError(\"Пароль має бути не менше 6 символів.\");\n      valid = false;\n    } else {\n      setPasswordError(null);\n    }\n    if (!isLogin && !validateConfirmPassword(password, confirmPassword)) {\n      setConfirmPasswordError(\"Паролі не збігаються.\");\n      valid = false;\n    } else {\n      setConfirmPasswordError(null);\n    }\n    if (!isLogin && !firstName) {\n      setFirstNameError(\"Будь ласка, введіть ваше ім'я.\");\n      valid = false;\n    } else if (!isLogin && !validateNameLength(firstName)) {\n      setFirstNameError(\"Ім'я має містити щонайменше 2 символи.\");\n      valid = false;\n    } else {\n      setFirstNameError(null);\n    }\n    if (!isLogin && !lastName) {\n      setLastNameError(\"Будь ласка, введіть ваше прізвище.\");\n      valid = false;\n    } else if (!isLogin && !validateNameLength(lastName)) {\n      setLastNameError(\"Прізвище має містити щонайменше 2 символи.\");\n      valid = false;\n    } else {\n      setLastNameError(null);\n    }\n    return valid;\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!validateForm()) {\n      setError(\"Будь ласка, виправте помилки.\");\n      return;\n    }\n    setLoading(true);\n    setError(null);\n    const endpoint = isLogin ? \"login\" : \"register\";\n    const body = {\n      email,\n      password,\n      firstName,\n      lastName\n    };\n    try {\n      const response = await fetch(`http://localhost:5000/${endpoint}`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(body)\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        setError(errorData.message || \"Невірний логін або пароль\");\n        return;\n      }\n      const data = await response.json();\n      login(data.token);\n      if (!isLogin) {\n        setShowSuccess(true);\n        setTimeout(() => {\n          setShowSuccess(false);\n          if (data.token) {\n            const decodedToken = JSON.parse(atob(data.token.split(\".\")[1]));\n            if (decodedToken.role === \"manager\") {\n              navigate(\"/manage-rooms\");\n            } else {\n              navigate(\"/rooms\");\n            }\n          } else {\n            setError(\"Токен не отримано\");\n          }\n        }, 3000);\n      } else {\n        if (data.token) {\n          const decodedToken = JSON.parse(atob(data.token.split(\".\")[1]));\n          if (decodedToken.role === \"manager\") {\n            navigate(\"/manage-rooms\");\n          } else {\n            navigate(\"/rooms\");\n          }\n        } else {\n          setError(\"Токен не отримано\");\n        }\n      }\n    } catch (err) {\n      console.error(err);\n      setError(\"Помилка при підключенні до сервера\");\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"auth-form-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      className: \"auth-form\",\n      noValidate: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error-message-global\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 17\n    }, this), showSuccess && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"floating-message success-floating\",\n      children: \"\\u0420\\u0435\\u0454\\u0441\\u0442\\u0440\\u0430\\u0446\\u0456\\u044F \\u043F\\u0440\\u043E\\u0439\\u0448\\u043B\\u0430 \\u0443\\u0441\\u043F\\u0456\\u0448\\u043D\\u043E!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: isLogin ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [\"\\u0429\\u0435 \\u043D\\u0435 \\u0437\\u0430\\u0440\\u0435\\u0454\\u0441\\u0442\\u0440\\u043E\\u0432\\u0430\\u043D\\u0456? \", /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setIsLogin(false),\n          children: \"\\u0420\\u0435\\u0454\\u0441\\u0442\\u0440\\u0430\\u0446\\u0456\\u044F\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 34\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [\"\\u0412\\u0436\\u0435 \\u043C\\u0430\\u0454\\u0442\\u0435 \\u0430\\u043A\\u0430\\u0443\\u043D\\u0442? \", /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setIsLogin(true),\n          children: \"\\u0423\\u0432\\u0456\\u0439\\u0442\\u0438\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 31\n        }, this)]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 161,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthPage, \"lNgx8JqhMupc5HFDSHrNb+pjj7w=\", false, function () {\n  return [useNavigate];\n});\n_c = AuthPage;\nexport default AuthPage;\nvar _c;\n$RefreshReg$(_c, \"AuthPage\");","map":{"version":3,"names":["React","useState","useNavigate","useContext","AuthContext","jsxDEV","_jsxDEV","Fragment","_Fragment","AuthPage","_s","email","setEmail","password","setPassword","confirmPassword","setConfirmPassword","firstName","setFirstName","lastName","setLastName","isLogin","setIsLogin","error","setError","loading","setLoading","showSuccess","setShowSuccess","emailError","setEmailError","passwordError","setPasswordError","confirmPasswordError","setConfirmPasswordError","firstNameError","setFirstNameError","lastNameError","setLastNameError","navigate","authContext","Error","login","validateEmail","regex","test","validatePassword","length","validateConfirmPassword","validateNameLength","name","trim","validateForm","valid","handleSubmit","e","preventDefault","endpoint","body","response","fetch","method","headers","JSON","stringify","ok","errorData","json","message","data","token","setTimeout","decodedToken","parse","atob","split","role","err","console","className","children","onSubmit","noValidate","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["E:/hotel-booking/frontend/src/modules/AuthPage/AuthPage.tsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useContext } from \"react\";\nimport { AuthContext } from \"../../context/AuthContext\";\nimport './AuthPage.scss';\n\nconst AuthPage = () => {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n  const [firstName, setFirstName] = useState(\"\");\n  const [lastName, setLastName] = useState(\"\");\n  const [isLogin, setIsLogin] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [showSuccess, setShowSuccess] = useState(false);\n\n  const [emailError, setEmailError] = useState<string | null>(null);\n  const [passwordError, setPasswordError] = useState<string | null>(null);\n  const [confirmPasswordError, setConfirmPasswordError] = useState<string | null>(null);\n  const [firstNameError, setFirstNameError] = useState<string | null>(null);\n  const [lastNameError, setLastNameError] = useState<string | null>(null);\n\n  const navigate = useNavigate();\n  const authContext = useContext(AuthContext);\n\n  if (!authContext) {\n    throw new Error(\"AuthContext is not available\");\n  }\n\n  const { login } = authContext;\n\n  const validateEmail = (email: string) => {\n    const regex = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,6}$/;\n    return regex.test(email);\n  };\n\n  const validatePassword = (password: string) => {\n    return password.length >= 6;\n  };\n\n  const validateConfirmPassword = (password: string, confirmPassword: string) => {\n    return password === confirmPassword;\n  };\n\n  const validateNameLength = (name: string) => {\n    return name.trim().length >= 2;\n  };\n\n  const validateForm = () => {\n    let valid = true;\n    if (!validateEmail(email)) {\n      setEmailError(\"Електронна пошта повинна мати формат: user@example.com\");\n      valid = false;\n    } else {\n      setEmailError(null);\n    }\n\n    if (!validatePassword(password)) {\n      setPasswordError(\"Пароль має бути не менше 6 символів.\");\n      valid = false;\n    } else {\n      setPasswordError(null);\n    }\n\n    if (!isLogin && !validateConfirmPassword(password, confirmPassword)) {\n      setConfirmPasswordError(\"Паролі не збігаються.\");\n      valid = false;\n    } else {\n      setConfirmPasswordError(null);\n    }\n\n    if (!isLogin && !firstName) {\n      setFirstNameError(\"Будь ласка, введіть ваше ім'я.\");\n      valid = false;\n    } else if (!isLogin && !validateNameLength(firstName)) {\n      setFirstNameError(\"Ім'я має містити щонайменше 2 символи.\");\n      valid = false;\n    } else {\n      setFirstNameError(null);\n    }\n\n    if (!isLogin && !lastName) {\n      setLastNameError(\"Будь ласка, введіть ваше прізвище.\");\n      valid = false;\n    } else if (!isLogin && !validateNameLength(lastName)) {\n      setLastNameError(\"Прізвище має містити щонайменше 2 символи.\");\n      valid = false;\n    } else {\n      setLastNameError(null);\n    }\n\n    return valid;\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!validateForm()) {\n      setError(\"Будь ласка, виправте помилки.\");\n      return;\n    }\n\n    setLoading(true);\n    setError(null);\n\n    const endpoint = isLogin ? \"login\" : \"register\";\n    const body = { email, password, firstName, lastName };\n\n    try {\n      const response = await fetch(`http://localhost:5000/${endpoint}`, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(body),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        setError(errorData.message || \"Невірний логін або пароль\");\n        return;\n      }\n\n      const data = await response.json();\n      login(data.token);\n\n      if (!isLogin) {\n        setShowSuccess(true);\n        setTimeout(() => {\n          setShowSuccess(false);\n          if (data.token) {\n            const decodedToken = JSON.parse(atob(data.token.split(\".\")[1]));\n            if (decodedToken.role === \"manager\") {\n              navigate(\"/manage-rooms\");\n            } else {\n              navigate(\"/rooms\");\n            }\n          } else {\n            setError(\"Токен не отримано\");\n          }\n        }, 3000);\n      } else {\n        if (data.token) {\n          const decodedToken = JSON.parse(atob(data.token.split(\".\")[1]));\n          if (decodedToken.role === \"manager\") {\n            navigate(\"/manage-rooms\");\n          } else {\n            navigate(\"/rooms\");\n          }\n        } else {\n          setError(\"Токен не отримано\");\n        }\n      }\n    } catch (err) {\n      console.error(err);\n      setError(\"Помилка при підключенні до сервера\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"auth-form-container\">\n      <form onSubmit={handleSubmit} className=\"auth-form\" noValidate>\n        {/* поля форми тут залишаються без змін */}\n        {/* ... */}\n      </form>\n\n      {error && <p className=\"error-message-global\">{error}</p>}\n\n      {showSuccess && (\n        <div className=\"floating-message success-floating\">\n          Реєстрація пройшла успішно!\n        </div>\n      )}\n\n      <p>\n        {isLogin ? (\n          <>\n            Ще не зареєстровані? <button onClick={() => setIsLogin(false)}>Реєстрація</button>\n          </>\n        ) : (\n          <>\n            Вже маєте акаунт? <button onClick={() => setIsLogin(true)}>Увійти</button>\n          </>\n        )}\n      </p>\n    </div>\n  );\n};\n\nexport default AuthPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}