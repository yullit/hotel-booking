{"ast":null,"code":"var _jsxFileName = \"E:\\\\hotel-booking\\\\frontend\\\\src\\\\modules\\\\AuthPage\\\\AuthPage.tsx\",\n  _s = $RefreshSig$();\n// src/pages/AuthPage.tsx\nimport React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useContext } from 'react';\nimport { AuthContext } from '../..'; // Імпортуємо AuthContext\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst AuthPage = () => {\n  _s();\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [isLogin, setIsLogin] = useState(true);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const navigate = useNavigate();\n  const authContext = useContext(AuthContext);\n  if (!authContext) {\n    throw new Error('AuthContext is not available');\n  }\n  const {\n    login\n  } = authContext;\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!email || !password) {\n      setError(\"Будь ласка, заповніть всі поля.\");\n      return;\n    }\n    setLoading(true);\n    setError(null);\n    const endpoint = isLogin ? 'login' : 'register';\n    const body = {\n      email,\n      password\n    };\n    try {\n      const response = await fetch(`http://localhost:5000/${endpoint}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(body)\n      });\n      if (response.ok) {\n        const data = await response.json();\n        if (isLogin) {\n          login(data.token); // Використовуємо метод з контексту для збереження токену\n          navigate('/rooms'); // Перенаправляємо на сторінку номери\n        } else {\n          setError(\"Реєстрація успішна! Тепер ви можете увійти.\");\n        }\n      } else {\n        const errorData = await response.json();\n        setError(errorData.message || 'Невірний логін або пароль');\n      }\n    } catch (err) {\n      console.error(err);\n      setError('Помилка при підключенні до сервера');\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"email\",\n        placeholder: \"Email\",\n        value: email,\n        onChange: e => setEmail(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        placeholder: \"Password\",\n        value: password,\n        onChange: e => setPassword(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        disabled: loading,\n        children: loading ? \"Зачекайте...\" : isLogin ? \"Увійти\" : \"Зареєструватися\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: isLogin ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [\"\\u0429\\u0435 \\u043D\\u0435 \\u0437\\u0430\\u0440\\u0435\\u0454\\u0441\\u0442\\u0440\\u043E\\u0432\\u0430\\u043D\\u0456?\", \" \", /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setIsLogin(false),\n          children: \"\\u0420\\u0435\\u0454\\u0441\\u0442\\u0440\\u0430\\u0446\\u0456\\u044F\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [\"\\u0412\\u0436\\u0435 \\u043C\\u0430\\u0454\\u0442\\u0435 \\u0430\\u043A\\u0430\\u0443\\u043D\\u0442?\", \" \", /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setIsLogin(true),\n          children: \"\\u0423\\u0432\\u0456\\u0439\\u0442\\u0438\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: \"red\"\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthPage, \"lXhiKhSIgCHB6irGV9r63S9yg3c=\", false, function () {\n  return [useNavigate];\n});\n_c = AuthPage;\nexport default AuthPage;\nvar _c;\n$RefreshReg$(_c, \"AuthPage\");","map":{"version":3,"names":["React","useState","useNavigate","useContext","AuthContext","jsxDEV","_jsxDEV","Fragment","_Fragment","AuthPage","_s","email","setEmail","password","setPassword","isLogin","setIsLogin","error","setError","loading","setLoading","navigate","authContext","Error","login","handleSubmit","e","preventDefault","endpoint","body","response","fetch","method","headers","JSON","stringify","ok","data","json","token","errorData","message","err","console","children","onSubmit","type","placeholder","value","onChange","target","fileName","_jsxFileName","lineNumber","columnNumber","disabled","onClick","style","color","_c","$RefreshReg$"],"sources":["E:/hotel-booking/frontend/src/modules/AuthPage/AuthPage.tsx"],"sourcesContent":["// src/pages/AuthPage.tsx\nimport React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useContext } from 'react';\nimport { AuthContext } from '../..'; // Імпортуємо AuthContext\n\nconst AuthPage = () => {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [isLogin, setIsLogin] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [loading, setLoading] = useState(false);\n  const navigate = useNavigate();\n  const authContext = useContext(AuthContext);\n\n  if (!authContext) {\n    throw new Error('AuthContext is not available');\n  }\n\n  const { login } = authContext;\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (!email || !password) {\n      setError(\"Будь ласка, заповніть всі поля.\");\n      return;\n    }\n\n    setLoading(true);\n    setError(null);\n\n    const endpoint = isLogin ? 'login' : 'register';\n    const body = { email, password };\n\n    try {\n      const response = await fetch(`http://localhost:5000/${endpoint}`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(body),\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        if (isLogin) {\n          login(data.token); // Використовуємо метод з контексту для збереження токену\n          navigate('/rooms'); // Перенаправляємо на сторінку номери\n        } else {\n          setError(\"Реєстрація успішна! Тепер ви можете увійти.\");\n        }\n      } else {\n        const errorData = await response.json();\n        setError(errorData.message || 'Невірний логін або пароль');\n      }\n    } catch (err) {\n      console.error(err);\n      setError('Помилка при підключенні до сервера');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div>\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"email\"\n          placeholder=\"Email\"\n          value={email}\n          onChange={(e) => setEmail(e.target.value)}\n        />\n        <input\n          type=\"password\"\n          placeholder=\"Password\"\n          value={password}\n          onChange={(e) => setPassword(e.target.value)}\n        />\n        <button type=\"submit\" disabled={loading}>\n          {loading ? \"Зачекайте...\" : isLogin ? \"Увійти\" : \"Зареєструватися\"}\n        </button>\n      </form>\n\n      <p>\n        {isLogin ? (\n          <>\n            Ще не зареєстровані?{\" \"}\n            <button onClick={() => setIsLogin(false)}>Реєстрація</button>\n          </>\n        ) : (\n          <>\n            Вже маєте акаунт?{\" \"}\n            <button onClick={() => setIsLogin(true)}>Увійти</button>\n          </>\n        )}\n      </p>\n\n      {error && <p style={{ color: \"red\" }}>{error}</p>}\n    </div>\n  );\n};\n\nexport default AuthPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}