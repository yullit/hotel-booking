{"ast":null,"code":"const handleSubmit = async e => {\n  e.preventDefault();\n  if (!email || !password || isLogin === false && !username) {\n    setError(\"Будь ласка, заповніть всі поля.\");\n    return;\n  }\n  setLoading(true);\n  setError(null);\n  const endpoint = isLogin ? \"login\" : \"register\";\n  const body = isLogin ? {\n    email,\n    password\n  } : {\n    username,\n    email,\n    password\n  }; // Видалили setRole\n\n  try {\n    const response = await fetch(`http://localhost:5000/${endpoint}`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(body)\n    });\n    if (response.ok) {\n      const data = await response.json();\n      if (isLogin) {\n        localStorage.setItem(\"token\", data.token); // Зберігаємо токен в localStorage\n\n        // Перевірка ролі після логіну\n        const decodedToken = JSON.parse(atob(data.token.split(\".\")[1])); // Декодуємо JWT токен\n        if (decodedToken.role === \"manager\") {\n          navigate(\"/manage-rooms\"); // Перенаправлення на ManageRoomsPage для менеджера\n        } else {\n          navigate(\"/rooms\"); // Перенаправлення на RoomsPage для звичайного користувача\n        }\n      } else {\n        setError(\"Реєстрація успішна! Тепер ви можете увійти.\");\n      }\n    } else {\n      const errorData = await response.json();\n      setError(errorData.message || \"Невірний логін або пароль\");\n    }\n  } catch (err) {\n    console.error(err);\n    setError(\"Помилка при підключенні до сервера\");\n  } finally {\n    setLoading(false);\n  }\n};","map":{"version":3,"names":["handleSubmit","e","preventDefault","email","password","isLogin","username","setError","setLoading","endpoint","body","response","fetch","method","headers","JSON","stringify","ok","data","json","localStorage","setItem","token","decodedToken","parse","atob","split","role","navigate","errorData","message","err","console","error"],"sources":["E:/hotel-booking/frontend/src/modules/AuthPage/AuthPage.tsx"],"sourcesContent":["const handleSubmit = async (e: React.FormEvent) => {\n  e.preventDefault();\n\n  if (!email || !password || (isLogin === false && !username)) {\n    setError(\"Будь ласка, заповніть всі поля.\");\n    return;\n  }\n\n  setLoading(true);\n  setError(null);\n\n  const endpoint = isLogin ? \"login\" : \"register\";\n  const body = isLogin\n    ? { email, password }\n    : { username, email, password }; // Видалили setRole\n\n  try {\n    const response = await fetch(`http://localhost:5000/${endpoint}`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(body),\n    });\n\n    if (response.ok) {\n      const data = await response.json();\n      if (isLogin) {\n        localStorage.setItem(\"token\", data.token); // Зберігаємо токен в localStorage\n\n        // Перевірка ролі після логіну\n        const decodedToken = JSON.parse(atob(data.token.split(\".\")[1])); // Декодуємо JWT токен\n        if (decodedToken.role === \"manager\") {\n          navigate(\"/manage-rooms\"); // Перенаправлення на ManageRoomsPage для менеджера\n        } else {\n          navigate(\"/rooms\"); // Перенаправлення на RoomsPage для звичайного користувача\n        }\n      } else {\n        setError(\"Реєстрація успішна! Тепер ви можете увійти.\");\n      }\n    } else {\n      const errorData = await response.json();\n      setError(errorData.message || \"Невірний логін або пароль\");\n    }\n  } catch (err) {\n    console.error(err);\n    setError(\"Помилка при підключенні до сервера\");\n  } finally {\n    setLoading(false);\n  }\n};\n"],"mappings":"AAAA,MAAMA,YAAY,GAAG,MAAOC,CAAkB,IAAK;EACjDA,CAAC,CAACC,cAAc,CAAC,CAAC;EAElB,IAAI,CAACC,KAAK,IAAI,CAACC,QAAQ,IAAKC,OAAO,KAAK,KAAK,IAAI,CAACC,QAAS,EAAE;IAC3DC,QAAQ,CAAC,iCAAiC,CAAC;IAC3C;EACF;EAEAC,UAAU,CAAC,IAAI,CAAC;EAChBD,QAAQ,CAAC,IAAI,CAAC;EAEd,MAAME,QAAQ,GAAGJ,OAAO,GAAG,OAAO,GAAG,UAAU;EAC/C,MAAMK,IAAI,GAAGL,OAAO,GAChB;IAAEF,KAAK;IAAEC;EAAS,CAAC,GACnB;IAAEE,QAAQ;IAAEH,KAAK;IAAEC;EAAS,CAAC,CAAC,CAAC;;EAEnC,IAAI;IACF,MAAMO,QAAQ,GAAG,MAAMC,KAAK,CAAC,yBAAyBH,QAAQ,EAAE,EAAE;MAChEI,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDJ,IAAI,EAAEK,IAAI,CAACC,SAAS,CAACN,IAAI;IAC3B,CAAC,CAAC;IAEF,IAAIC,QAAQ,CAACM,EAAE,EAAE;MACf,MAAMC,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;MAClC,IAAId,OAAO,EAAE;QACXe,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEH,IAAI,CAACI,KAAK,CAAC,CAAC,CAAC;;QAE3C;QACA,MAAMC,YAAY,GAAGR,IAAI,CAACS,KAAK,CAACC,IAAI,CAACP,IAAI,CAACI,KAAK,CAACI,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACjE,IAAIH,YAAY,CAACI,IAAI,KAAK,SAAS,EAAE;UACnCC,QAAQ,CAAC,eAAe,CAAC,CAAC,CAAC;QAC7B,CAAC,MAAM;UACLA,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC;QACtB;MACF,CAAC,MAAM;QACLrB,QAAQ,CAAC,6CAA6C,CAAC;MACzD;IACF,CAAC,MAAM;MACL,MAAMsB,SAAS,GAAG,MAAMlB,QAAQ,CAACQ,IAAI,CAAC,CAAC;MACvCZ,QAAQ,CAACsB,SAAS,CAACC,OAAO,IAAI,2BAA2B,CAAC;IAC5D;EACF,CAAC,CAAC,OAAOC,GAAG,EAAE;IACZC,OAAO,CAACC,KAAK,CAACF,GAAG,CAAC;IAClBxB,QAAQ,CAAC,oCAAoC,CAAC;EAChD,CAAC,SAAS;IACRC,UAAU,CAAC,KAAK,CAAC;EACnB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}